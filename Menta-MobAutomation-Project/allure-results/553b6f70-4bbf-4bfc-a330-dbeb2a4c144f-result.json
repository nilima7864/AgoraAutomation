{"uuid":"553b6f70-4bbf-4bfc-a330-dbeb2a4c144f","historyId":"862f1209236d800e40ee0e7968f86033","fullName":"cucumber.api.testng.AbstractTestNGCucumberTests.feature","labels":[{"name":"package","value":"TestNGRunner$TestNGAppRunner"},{"name":"testClass","value":"TestNGRunner$TestNGAppRunner"},{"name":"testMethod","value":"feature"},{"name":"parentSuite","value":"Default suite"},{"name":"suite","value":"Default test"},{"name":"subSuite","value":"TestNGRunner$TestNGAppRunner"},{"name":"host","value":"ShivaniVibhakar.local"},{"name":"thread","value":"2397@ShivaniVibhakar.local.main(1)"},{"name":"framework","value":"testng"},{"name":"language","value":"java"}],"links":[],"name":"Runs Cucumber Feature","status":"broken","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"Error parsing feature file API/Cards_Uat_Api.feature","trace":"cucumber.runtime.CucumberException: Error parsing feature file API/Cards_Uat_Api.feature\n\tat cucumber.runtime.FeatureBuilder.parse(FeatureBuilder.java:133)\n\tat cucumber.runtime.model.CucumberFeature.loadFromFeaturePath(CucumberFeature.java:104)\n\tat cucumber.runtime.model.CucumberFeature.load(CucumberFeature.java:54)\n\tat cucumber.runtime.model.CucumberFeature.load(CucumberFeature.java:34)\n\tat cucumber.runtime.RuntimeOptions.cucumberFeatures(RuntimeOptions.java:239)\n\tat cucumber.api.testng.TestNGCucumberRunner.getFeatures(TestNGCucumberRunner.java:85)\n\tat cucumber.api.testng.TestNGCucumberRunner.provideFeatures(TestNGCucumberRunner.java:94)\n\tat cucumber.api.testng.AbstractTestNGCucumberTests.features(AbstractTestNGCucumberTests.java:29)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:77)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:46)\n\tat org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:146)\n\tat org.testng.internal.Parameters.handleParameters(Parameters.java:798)\n\tat org.testng.internal.Parameters.handleParameters(Parameters.java:740)\n\tat org.testng.internal.ParameterHandler.handleParameters(ParameterHandler.java:59)\n\tat org.testng.internal.ParameterHandler.createParameters(ParameterHandler.java:38)\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:791)\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\n\tat java.util.ArrayList.forEach(ArrayList.java:1259)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\n\tat org.testng.TestRunner.run(TestRunner.java:596)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:276)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1134)\n\tat org.testng.TestNG.runSuites(TestNG.java:1063)\n\tat org.testng.TestNG.run(TestNG.java:1031)\n\tat org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)\n\tat org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)\n\tat org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)\nCaused by: gherkin.lexer.LexingError: Lexing error on line 28: '=end\t\n  \tGiven android masons app is installed on the device and launched successfully\n  \tThen android user should navigate to masons app login screen\n  \tWhen android user provides masons Username \"<IngoEmail1>\" and Password \"<IngoPass1>\"\n    And android user click on the masons login button\n    Then android user land on Who are you screen\n    When android user select the grand lodge or lodge \"<ingoGLorL>\"\n    And android user click on CONTINUE button on Who are you screen\n    Then android user land on Individual mason dashboard screen\n    When android user click on Profile Icon on Individual mason dashboard screen\n    Then android user land on Individual mason Profile screen\n    When android user click on Add Credit Debit Card on Individual mason Profile screen\n    Then android user land on My Cards screen in IM app\n    When android user click on Plus button for Add New Card on My Cards screen in IM app\n    Then android user land on Card has been added screen in IM app\n    When android user click on Close button on Card Created screen in IM app\n    Then android user land on My Cards screen in IM app    \n  \t\n  \tAnd User hit the POST http request \"<addCard>\" and check Status code as \"<StatusCode>\" for Add Card details\n  \t\n  \tGiven android masons app is installed on the device and launched successfully\n  \tThen android user should navigate to masons app login screen\n  \tWhen android user provides masons Username \"<IngoEmail1>\" and Password \"<IngoPass1>\"\n    And android user click on the masons login button\n    Then android user land on Who are you screen\n    When android user select the grand lodge or lodge \"<ingoGLorL>\"\n    And android user click on CONTINUE button on Who are you screen\n    Then android user land on Individual mason dashboard screen\n    And android user click on Manage Balance button in IM app\n    Then android user land on Add Money screen in IM app\n    When android user click on Debit Card option on Add Money screen in IM app\n    Then android user land on My Cards screen in IM app\n    When android user select the first card by default\n    Then android user land on Add Balance screen in IM app\n    When android user enters the Amount through keypad in IM app \"<Amount>\"\n    And android user click on Continue button on Add Balance screen\n    Then android user land on Confirm Your Transfer screen in IM app\n    When android user click on CONFIRM TRANSFER button in IM app\n    Then android user land on Money Added screen through ACH screen in IM app\n    When android user click on GO TO DASHBOARD button on Money Added screen in IM app\n    Then android user land on Individual mason dashboard screen\n    Then adnroid user verifying the account balance after adding the money\n  \t\n  \tAnd User hit the POST http request \"<revertWHApi>\" and check Status code as \"<StatusCode>\" for Revert money from Account  \t  \t\n   \t\n   \tGiven android masons app is installed on the device and launched successfully\n  \tThen android user should navigate to masons app login screen\n  \tWhen android user provides masons Username \"<IngoEmail1>\" and Password \"<IngoPass1>\"\n    And android user click on the masons login button\n    Then android user land on Who are you screen\n    When android user select the grand lodge or lodge \"<ingoGLorL>\"\n    And android user click on CONTINUE button on Who are you screen\n    Then android user land on Individual mason dashboard screen\n   \tThen adnroid user verifying the account balance after reverting the money\n   \t\n  \tExamples:\n\t\t\t| IngoEmail1 | IngoPass1 | ingoGLorL | TokenAPI       | getUserid | getAccDetails  | addCard   | revertWHApi | StatusCode | Amount |\n\t\t\t| IngoEmail1 | IngoPass1 | ingoGLorL | agoraAuthToken | getUserID | getAccDetailsM | addCardIM | revertMnyWH | 200        | 18 \t\t |\n\t\t\t\t\t\t\t\t\t\n  @getBalance\n  Scenario Outline: To verify the HTTP request for getBalance API.\n  \tGiven User Generate Token for API Validation from \"<TokenAPI>\" for CD application\n  \tWhen User hit the POST http request \"<APIName>\" and check Status code as \"<StatusCode>\" for CD application\n  \tThen User validate Response code as \"<ResponseCode>\" and Response description as \"<ResponseDes>\"\n  \t\n  \tExamples:\n    \t| TokenAPI \t\t\t| APIName    | StatusCode | ResponseCode | ResponseDes |\n    \t| tokenGenerate | getBalance | 200        | 000\t\t\t\t\t | Success     |\n    \t\n  @credit\n  Scenario Outline: To verify the HTTP request for credit API.\n    Given User Generate Token for API Validation from \"<TokenAPI>\" for CD application\n  \tWhen User hit the POST http request \"<APIName>\" and check Status code as \"<StatusCode>\" for CD application\n  \tThen User validate Response code as \"<ResponseCode>\" and Response description as \"<ResponseDes>\"\n  \t\n  \tExamples:\n    \t| TokenAPI \t\t\t| APIName | StatusCode | ResponseCode | ResponseDes |\n    \t| tokenGenerate | credit  | 200        | 000\t\t\t\t\t| Success     |\n    \t\n  @debit\n  Scenario Outline: To verify the HTTP request for debit API.\n    Given User Generate Token for API Validation from \"<TokenAPI>\" for CD application\n  \tWhen User hit the POST http request \"<APIName>\" and check Status code as \"<StatusCode>\" for CD application\n  \tThen User validate Response code as \"<ResponseCode>\" and Response description as \"<ResponseDes>\"\n  \t\n  \tExamples:\n    \t| TokenAPI \t\t\t| APIName | StatusCode | ResponseCode | ResponseDes |\n    \t| tokenGenerate | debit   | 200        | 000\t\t\t\t\t| Success     |  \t\n%_FEATURE_END_%'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.\n\tat gherkin.lexer.En.scan(En.java:872)\n\tat gherkin.lexer.I18nLexer.scan(I18nLexer.java:36)\n\tat gherkin.parser.Parser.parse(Parser.java:62)\n\tat cucumber.runtime.FeatureBuilder.parse(FeatureBuilder.java:131)\n\t... 39 more\n"},"stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"arg0","value":"cucumber.api.testng.CucumberExceptionWrapper@13d9b21f"}],"start":1677479774231,"stop":1677479774241}